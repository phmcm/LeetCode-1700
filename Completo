#include <stdio.h>
#include <stdbool.h>

// Função para verificar se o valor é válido (0 ou 1)
bool isValidInput(int value) {
    return value == 0 || value == 1;
}

// Função para contar o número de estudantes que não conseguem comer
int countStudents(int* students, int studentsSize, int* sandwiches, int sandwichesSize) {
    int unableToEat = 0;
    int currentStudentIdx = 0;

    for (int i = 0; i < studentsSize; i++) {
        if (!isValidInput(students[i])) {
            printf("Valor invalido! Digite novamente (0 - circular, 1 - quadrado): ");
            scanf("%d", &students[i]);
            i--; // Reexecuta a iteração para ler o valor corretamente
        }
    }

    for (int i = 0; i < sandwichesSize && currentStudentIdx < studentsSize; i++) {
        if (!isValidInput(sandwiches[i])) {
            printf("Valor invalido! Digite novamente (0 - circular, 1 - quadrado): ");
            scanf("%d", &sandwiches[i]);
            i--; // Reexecuta a iteração para ler o valor corretamente
        } else {
            while (currentStudentIdx < studentsSize && students[currentStudentIdx] != sandwiches[i]) {
                currentStudentIdx++;
            }
            if (currentStudentIdx >= studentsSize) {
                break;
            }
            unableToEat++;
            currentStudentIdx++;
        }
    }

    return studentsSize - unableToEat;
}

int main() {
    int numEst, numSand;

    printf("Quantos estudantes estao na fila: ");
    scanf("%d", &numEst);
    numSand = numEst;

    int filaAlunos[100];
    printf("Digite a preferencia dos %d alunos (0 - circular, 1 - quadrado): \n", numEst);
    for (int i = 0; i < numEst; i++) {
        scanf("%d", &filaAlunos[i]);
    }

    int pilhaSand[100];
    printf("Digite o tipo de sanduiche (0 - circular, 1 - quadrado): \n");
    for (int i = 0; i < numSand; i++) {
        scanf("%d", &pilhaSand[i]);
    }

    int result = countStudents(filaAlunos, numEst, pilhaSand, numSand);
    printf("Numero de estudantes que nao conseguem comer: %d\n", result);

    return 0;
}
